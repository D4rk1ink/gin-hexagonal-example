openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterReq'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterRes'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'

  /api/auth/login:
    post:
      summary: Login a user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginReq'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRes'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'

  /api/users:
    get:
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authentication
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersRes'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
  
  /api/users/{id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authentication
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRes'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
    patch:
      summary: Update a user by ID
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: Bearer token for authentication
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateReq'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRes'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
                
components:
  schemas:
    ErrorRes:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/ErrorBody'
    ErrorBody:
      type: object
      required:
        - code
      properties:
        code:
          type: string
        message:
          type: string
    RegisterReq:
      type: object
      required:
        - name
        - email
        - password
        - confirm_password
      properties:
        name:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,omitempty"
        email:
          type: string
          format: email
          x-oapi-codegen-extra-tags:
            validate: "required,omitempty"
        password:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,omitempty"
        confirm_password:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,omitempty"
    RegisterRes:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
    LoginReq:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          x-oapi-codegen-extra-tags:
            validate: "required,omitempty"
        password:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,omitempty"
    LoginRes:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
    UsersRes:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    UserRes:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/User'
    UserUpdateReq:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
    UserUpdateRes:
      type: object
      required:
        - success
      properties:
        data:
          $ref: '#/components/schemas/User'
    User:
      type: object
      required:
        - id
        - name
        - email
        - created_at
        - updated_at
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time