// Code generated by MockGen. DO NOT EDIT.
// Source: jwt.go

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	reflect "reflect"

	jwt "github.com/D4rk1ink/gin-hexagonal-example/internal/infrastructure/jwt"
	gomock "github.com/golang/mock/gomock"
)

// MockJwt is a mock of Jwt interface.
type MockJwt struct {
	ctrl     *gomock.Controller
	recorder *MockJwtMockRecorder
}

// MockJwtMockRecorder is the mock recorder for MockJwt.
type MockJwtMockRecorder struct {
	mock *MockJwt
}

// NewMockJwt creates a new mock instance.
func NewMockJwt(ctrl *gomock.Controller) *MockJwt {
	mock := &MockJwt{ctrl: ctrl}
	mock.recorder = &MockJwtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwt) EXPECT() *MockJwtMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockJwt) GenerateAccessToken(input *jwt.GenerateTokenInput) (*string, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", input)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockJwtMockRecorder) GenerateAccessToken(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockJwt)(nil).GenerateAccessToken), input)
}

// GenerateTokenWithOptions mocks base method.
func (m *MockJwt) GenerateTokenWithOptions(input *jwt.GenerateTokenInput, options *jwt.GenerateTokenOptions) (*string, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenWithOptions", input, options)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokenWithOptions indicates an expected call of GenerateTokenWithOptions.
func (mr *MockJwtMockRecorder) GenerateTokenWithOptions(input, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenWithOptions", reflect.TypeOf((*MockJwt)(nil).GenerateTokenWithOptions), input, options)
}

// ValidateAccessToken mocks base method.
func (m *MockJwt) ValidateAccessToken(token string) (*jwt.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessToken", token)
	ret0, _ := ret[0].(*jwt.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAccessToken indicates an expected call of ValidateAccessToken.
func (mr *MockJwtMockRecorder) ValidateAccessToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessToken", reflect.TypeOf((*MockJwt)(nil).ValidateAccessToken), token)
}

// ValidateTokenWithOptions mocks base method.
func (m *MockJwt) ValidateTokenWithOptions(token string, options *jwt.ValidateTokenOptions) (*jwt.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTokenWithOptions", token, options)
	ret0, _ := ret[0].(*jwt.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTokenWithOptions indicates an expected call of ValidateTokenWithOptions.
func (mr *MockJwtMockRecorder) ValidateTokenWithOptions(token, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTokenWithOptions", reflect.TypeOf((*MockJwt)(nil).ValidateTokenWithOptions), token, options)
}
