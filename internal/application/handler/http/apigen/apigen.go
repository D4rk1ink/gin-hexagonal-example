// Package http_apigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package http_apigen

import (
	"time"

	"github.com/gin-gonic/gin"
)

// ErrorBody defines model for ErrorBody.
type ErrorBody struct {
	Code    string  `json:"code"`
	Message *string `json:"message,omitempty"`
}

// ErrorRes defines model for ErrorRes.
type ErrorRes struct {
	Error ErrorBody `json:"error"`
}

// LoginReq defines model for LoginReq.
type LoginReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// LoginRes defines model for LoginRes.
type LoginRes struct {
	AccessToken string `json:"access_token"`
	ExpiresIn   int    `json:"expires_in"`
	TokenType   string `json:"token_type"`
}

// RegisterReq defines model for RegisterReq.
type RegisterReq struct {
	ConfirmPassword string `json:"confirm_password"`
	Email           string `json:"email"`
	Name            string `json:"name"`
	Password        string `json:"password"`
}

// RegisterRes defines model for RegisterRes.
type RegisterRes struct {
	Success bool `json:"success"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time `json:"created_at"`
	Email     string    `json:"email"`
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
}

// UsersRes defines model for UsersRes.
type UsersRes struct {
	Data []User `json:"data"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginReq

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterReq

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login a user
	// (POST /api/login)
	Login(c *gin.Context)
	// Register a new user
	// (POST /api/register)
	Register(c *gin.Context)
	// Get all users
	// (GET /api/users)
	GetUsers(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Register(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/login", wrapper.Login)
	router.POST(options.BaseURL+"/api/register", wrapper.Register)
	router.GET(options.BaseURL+"/api/users", wrapper.GetUsers)
}
